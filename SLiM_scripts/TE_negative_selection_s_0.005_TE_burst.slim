initialize() {
	defineConstant("L", 3e6);                 // chromosome length
	defineConstant("teInitialCount", 5000);   // initial number of TEs
	defineConstant("teJumpP_A", 0.0001);      // TE jump probability
	defineConstant("teJumpP_B", 0.001);       // TE jump probability
	defineConstant("teDisableP", 0.00005);    // disabling mut probability
	
	defineConstant("Peri_A_start", 500001);    // strat pericentromeric regions Bolck A
	defineConstant("Peri_A_end", 1000000);     // end pericentromeric regions Bolck A
	defineConstant("Scentro_A_start", 1000001);// strat centromere Bolck A
	defineConstant("Scentro_A_end", 1500000);  // end centromere Bolck A
	defineConstant("Scentro_B_start", 1500001);// strat centromere Bolck B
	defineConstant("Scentro_B_end", 2000000);  // end centromere Bolck B
	defineConstant("Peri_B_start", 2000001);   // strat pericentromeric regions Bolck B
	defineConstant("Peri_B_end", 2500000);     // end pericentromeric regions Bolck B
	
	defineConstant("rec_arm", 1e-4);          // recombination rate in chrom. arm
	defineConstant("rec_peri", 5e-5);         // recombination rate in pericentr. region
	defineConstant("rec_cent", 1e-5);         // recombination rate in centromere
	
	defineConstant("run_N", run);             // run number
	
	// Build regions with different recombination rats
	ends = c(Peri_A_start -1, Peri_A_end, Scentro_A_end, Scentro_B_end, Peri_B_end, L);
	densities = c(rec_arm, rec_peri, rec_cent, rec_cent, rec_peri, rec_arm);
	initializeRecombinationRate(densities, ends);
	
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);  // neutral
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	//initializeRecombinationRate(1e-8);
	
	// transposon mutation type; also neutral, but red
	initializeMutationType("m2", 0.5, "f", (-0.005*2));
	m2.convertToSubstitution = F;
	
	// disabled transposon mutation type; dark red
	initializeMutationType("m3", 0.5, "f", (-0.005*2));
	m3.convertToSubstitution = F;
}
1 late() {
	sim.addSubpop("p1", 500);
}

1 late() {
	sim.tag = 0;	// the next unique tag value to use for TEs
	
	// create some transposons at random positions
	genomes = sim.subpopulations.genomes;
	positions = rdunif(teInitialCount, 0, L-1);
	
	for (teIndex in 0:(teInitialCount-1))
	{
		pos = positions[teIndex];
		mut = genomes.addNewDrawnMutation(m2, pos);
		mut.tag = sim.tag;
		sim.tag = sim.tag + 1;
	}
}
modifyChild() {
	// disable transposons with rate teDisableP
	for (genome in child.genomes)
	{
		tes = genome.mutationsOfType(m2);
		teCount = tes.size();
		mutatedCount = teCount ? rpois(1, teCount * teDisableP) else 0;
		
		if (mutatedCount)
		{
			mutatedTEs = sample(tes, mutatedCount);
			
			for (te in mutatedTEs)
			{
				all_disabledTEs = sim.mutationsOfType(m3);
				disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
				
				if (size(disabledTE))
				{
					// use the existing disabled TE mutation
					genome.removeMutations(te);
					genome.addMutations(disabledTE);
					next;
				}
				
				// make a new disabled TE mutation with the right tag
				genome.removeMutations(te);
				disabledTE = genome.addNewDrawnMutation(m3, te.position);
				disabledTE.tag = te.tag;
				disabledTE.setValue("OG", te.originGeneration);
			}
		}
	}
	
	return T;
}
late() {
	// make active transposons copy themselves with rate teJumpP_A
	for (individual in sim.subpopulations.individuals)
	{
		for (genome in individual.genomes)
		{
			tes = genome.mutationsOfType(m2);
			teCount = tes.size();
			jumpCount = teCount ? rpois(1, teCount * teJumpP_A) else 0;
			
			if (jumpCount)
			{
				jumpTEs = sample(tes, jumpCount);
				
				for (te in jumpTEs)
				{
					// make a new TE mutation
					pos = rdunif(1, 0, L-1);
					jumpTE = genome.addNewDrawnMutation(m2, pos);
					jumpTE.tag = sim.tag;
					sim.tag = sim.tag + 1;
				}
			}
		}
	}
}

5000 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5000 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5000 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5000 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_0_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_0_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_0_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}

5001:5250 late() {
	// make active transposons copy themselves with rate teJumpP_B
	for (individual in sim.subpopulations.individuals)
	{
		for (genome in individual.genomes)
		{
			tes = genome.mutationsOfType(m2);
			teCount = tes.size();
			jumpCount = teCount ? rpois(1, teCount * teJumpP_B) else 0;
			
			if (jumpCount)
			{
				jumpTEs = sample(tes, jumpCount);
				
				for (te in jumpTEs)
				{
					// make a new TE mutation
					pos = rdunif(1, 0, L-1);
					jumpTE = genome.addNewDrawnMutation(m2, pos);
					jumpTE.tag = sim.tag;
					sim.tag = sim.tag + 1;
				}
			}
		}
	}
}

5050 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5050 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5050 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5050 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_50_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_50_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_50_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}

5250 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5250 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5250 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5250 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}

5251:10000 late() {
	// make active transposons copy themselves with rate teJumpP_A
	for (individual in sim.subpopulations.individuals)
	{
		for (genome in individual.genomes)
		{
			tes = genome.mutationsOfType(m2);
			teCount = tes.size();
			jumpCount = teCount ? rpois(1, teCount * teJumpP_A) else 0;
			
			if (jumpCount)
			{
				jumpTEs = sample(tes, jumpCount);
				
				for (te in jumpTEs)
				{
					// make a new TE mutation
					pos = rdunif(1, 0, L-1);
					jumpTE = genome.addNewDrawnMutation(m2, pos);
					jumpTE.tag = sim.tag;
					sim.tag = sim.tag + 1;
				}
			}
		}
	}
}

5300 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5300 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5300 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5300 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_300_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_300_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_300_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
	
	g = p1.genomes;
	g.outputVCF(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/vcf_files/Generation_300_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".vcf"), simplifyNucleotides=T);
}

5500 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5500 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5500 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5500 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_500_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_500_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_500_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}


5750 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 5750 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 5750 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 5750 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_750_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_750_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_750_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}

6250 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 6250 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 6250 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 6250 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_1250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_1250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_1250_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}


7000 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 7000 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 7000 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 7000 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_2000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_2000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_2000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}


10000 late() {
	// print information on each TE, including the fraction of it disabled
	all_tes = sortBy(sim.mutationsOfType(m2), "position");
	all_disabledTEs = sortBy(sim.mutationsOfType(m3), "position");
	genomeCount = size(sim.subpopulations.genomes);
	
	// create some output files
	file_TE_act = "position, age, frequency, active\n";
	file_TE_dis = "position, age, frequency\n";
	file_SNP = "position, age, frequency\n";
	all_SNPs = sortBy(sim.mutationsOfType(m1), "position");
	
	for (te in all_tes)
	{
		// get the age of the TE:
		TEage = 10000 - te.originGeneration;
		
		active = sim.mutationCounts(NULL, te);
		disabledTE = all_disabledTEs[all_disabledTEs.tag == te.tag];
		
		if (size(disabledTE) == 0)
		{
			disabled = 0;
		}
		else
		{
			disabled = sim.mutationCounts(NULL, disabledTE);
			all_disabledTEs = all_disabledTEs[all_disabledTEs != disabledTE];
		}
		
		total = active + disabled;
		
		// get the output informations
		lines_TE_act = paste(c(te.position, ', ', TEage, ', ', c(total / genomeCount), ', ', c(active / total), '\n'), '');
		file_TE_act = file_TE_act + lines_TE_act;
	
	}
	
	for (te in all_disabledTEs)
	{
		freq = sim.mutationFrequencies(NULL, te);
		TEage = 10000 - te.getValue("OG");
		
		// get the output informations
		lines_TE_dis = paste(c(te.position, ', ', TEage, ', ', sim.mutationFrequencies(NULL, te), '\n'), '');
		file_TE_dis = file_TE_dis + lines_TE_dis;
	
	}
	
	for (SNP in all_SNPs)
	{
		// get the age of the TE:
		SNPage = 10000 - SNP.originGeneration;
		SNPfreq = sim.mutationFrequencies(NULL, SNP);
		
		// get the output informations
		lines_SNP = paste(c(SNP.position, ', ', SNPage, ', ', SNPfreq, '\n'), '');
		file_SNP = file_SNP + lines_SNP;
	
	}
	
	// write out the result files
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.active_generation_5000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_act))
		stop("Error writing file TE active.");
	if (!writeFile(paste("/home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/TE.disabled_generation_5000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_TE_dis))
		stop("Error writing file TE disabled.");
	if (!writeFile(paste("//home/rhorvath/SLiM_TE_simulations/SLiM_TE_results_secound_run/SNP_generation_5000_neg_sel_s_0.005_TE_burst_run_number_" + run_N + ".out.txt"),file_SNP))
		stop("Error writing file SNP.");
}

